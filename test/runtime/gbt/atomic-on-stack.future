bug: ugni network atomics broken with qthreads due to unregistered task stacks


With comm=ugni we only register hugepage-resident space with the NIC.
The ugni comm layer and tcmalloc meory layer cooperate to ensure that
the Chapel heap is on hugepages.  Assuming a craype-hugepages* module is
loaded at execution time (as recommended), the executable's data segment
(initialized and bss) and the regular heap are also on hugepages.  When
Qthreads gets qthread (task) stacks it uses the regular glibc memory
allocation interface.  Unfortunately, this may or may not (depending on
internal glibc decision making which is not entirely user controllable)
result in hugepage space being allocated and indeed, in practice we see
that typically we get non-hugepage space.  Then, if the compiler leaves
an atomic variable on the stack and we try to do a Gemini/Aries network
atomic on it, we get an internal comm=ugni error because the target var
is not in registered memory.  (For GETs and PUTs we can bounce through
trampolines in registered memory, but this isn't possible for the target
vars of AMOs.)
